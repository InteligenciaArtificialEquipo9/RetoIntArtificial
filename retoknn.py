# -*- coding: utf-8 -*-
"""retoKNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VFRWNECb_hbOBIRAqg8MFXni9dQ2zc3_

KNN implementation
"""
import pickle
import pandas as pd 
import numpy as np 
import seaborn as sns
import sklearn
import csv
import matplotlib.pyplot as plt
import sklearn.neighbors

from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier

# LÃ­nea a cambiar para correr
ruta_al_archivo = "train.csv"

# Train DF
df = pd.read_csv(ruta_al_archivo)
df

# Test DF
ruta_al_archivo = "test.csv"

test = pd.read_csv(ruta_al_archivo)
test

df.head()

test.head()

corr_matrix = df.corr()
corr_matrix["Survived"]

"""Highest correlation with survived is Fare, then comes Pclass."""

df.info()

"""Cabin has only 204 values from 891 that are not null, there are a lot of missing values in that column. We can either populate it with synthetic data or drop it. We can take the columns of Sex and Age to evaluate further."""

plt.hist(df["Sex"])
plt.show()

sns.barplot(
    data = df,
    x = 'Sex',
    y = 'Survived'
)
plt.show()

sns.barplot(
    data = df,
    x = 'Pclass',
    y = 'Survived',
    hue = 'Sex'
)
plt.show()

"""People from the highest class have the highest survival rate. Survival rate between women from first class and second class is little, but women from third class present a bigger difference.

There were more surviving men from first class than 2nd and 3rd, the difference in survivial ratio between the 2nd and 3rd for men is small. 

"""

sns.barplot(
    data = df,
    x = 'Age',
    y = 'Survived'
)
plt.show()

plt.hist(df["Age"])
plt.show()

"""Data preparation"""

toDrop = ["PassengerId", "Name", "Ticket", "Cabin", "SibSp", "Parch"]
df = df.drop(toDrop, axis=1)
df.head()

toDrop = ["Name", "Ticket", "Cabin", "SibSp", "Parch"]
test = test.drop(toDrop, axis=1)
test.head()

test.info()

mean = test["Fare"].mean()
test["Fare"] = test["Fare"].fillna(mean)

test["Age"].fillna(round(test["Age"].mean(),3), inplace = True)

test['Age'] = test['Age'].astype(int)
test.loc[ test['Age'] <= 11, 'Age'] = 0
test.loc[(test['Age'] > 11) & (test['Age'] <= 18), 'Age'] = 1
test.loc[(test['Age'] > 18) & (test['Age'] <= 22), 'Age'] = 2
test.loc[(test['Age'] > 22) & (test['Age'] <= 27), 'Age'] = 3
test.loc[(test['Age'] > 27) & (test['Age'] <= 33), 'Age'] = 4
test.loc[(test['Age'] > 33) & (test['Age'] <= 40), 'Age'] = 5
test.loc[(test['Age'] > 40) & (test['Age'] <= 66), 'Age'] = 6
test.loc[ test['Age'] > 66, 'Age'] = 6



test.info()

df.info()

"""S is the port where the mayority of people embarked so populate with that."""

df["Embarked"] = df["Embarked"].fillna('S')
df["Age"].fillna(round(df["Age"].mean(),3), inplace = True)
df['Age'] = df['Age'].astype(int)
df.loc[ df['Age'] <= 11, 'Age'] = 0
df.loc[(df['Age'] > 11) & (df['Age'] <= 18), 'Age'] = 1
df.loc[(df['Age'] > 18) & (df['Age'] <= 22), 'Age'] = 2
df.loc[(df['Age'] > 22) & (df['Age'] <= 27), 'Age'] = 3
df.loc[(df['Age'] > 27) & (df['Age'] <= 33), 'Age'] = 4
df.loc[(df['Age'] > 33) & (df['Age'] <= 40), 'Age'] = 5
df.loc[(df['Age'] > 40) & (df['Age'] <= 66), 'Age'] = 6
df.loc[ df['Age'] > 66, 'Age'] = 6

df.info()
df

"""transform data"""

labelencoder = LabelEncoder()
df.iloc[:, 2] = labelencoder.fit_transform(df.iloc[:, 2].values)
df.iloc[:, 5] = labelencoder.fit_transform(df.iloc[:, 5].values)
test.iloc[:, 2] = labelencoder.fit_transform(test.iloc[:, 2].values)
test.iloc[:, 5] = labelencoder.fit_transform(test.iloc[:, 5].values)
df

df.info()

X = df[["Pclass","Sex", "Fare", "Embarked","Age"]]
y = df[["Survived"]].astype('int')
X

X = df.iloc[:, 1:6].values
y = df.iloc[:, 0].values

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0,
                                  train_size=0.7)

#Resultado con edad
k_range = range(1, 26)
score = []

for k in k_range:
  knn = KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train, y_train)
  y_pred = knn.predict(X_test)
  score.append(metrics.accuracy_score(y_test, y_pred))

print(score)

X = df[["Pclass","Sex", "Fare", "Embarked"]]
y = df[["Survived"]].astype('int')

X = X.iloc[:, 0:5].values
y = df.iloc[:, 0].values
X

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0,
                                  train_size=0.7)

#Resultado con edad
k_range = range(1, 26)
score = []

for k in k_range:
  knn = KNeighborsClassifier(n_neighbors=k)
  knn.fit(X_train, y_train)
  y_pred = knn.predict(X_test)
  score.append(metrics.accuracy_score(y_test, y_pred))

print(score)

"""Sin considerar edad obtenemos valores mas cercanos a los reales"""

plt.plot(k_range, score)
plt.xlabel("k value for KNN")
plt.ylabel("Testing accuracy")

# Accuracy score
knn = KNeighborsClassifier(n_neighbors=8)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred )

fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(cm)
ax.grid(False)
ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
ax.set_ylim(1.5, -0.5)
for i in range(2):
    for j in range(2):
        ax.text(j, i, cm[i, j], ha='center', va='center', color='red')
plt.show()

#ROC
false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)

def plot_roc_curve(false_positive_rate, true_positive_rate, label=None):
    plt.plot(false_positive_rate, true_positive_rate, linewidth=2, label=label)
    plt.plot([0, 1], [0, 1], 'r', linewidth=4)
    plt.axis([0, 1, 0, 1])
    plt.xlabel('False Positive Rate (FPR)', fontsize=16)
    plt.ylabel('True Positive Rate (TPR)', fontsize=16)

plt.figure(figsize=(12, 6))
plot_roc_curve(false_positive_rate, true_positive_rate)
plt.show()

score_y = knn.predict_proba(X_test)


fpr,tpr, thresh = metrics.roc_curve(y_test, score_y[:,1])

auc = metrics.auc(fpr, tpr)
print("AUC:", auc)

plt.plot(fpr, tpr, label='ROC curve (area = %.2f)' %auc)
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Random guess')
plt.title('ROC curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')

plt.grid()
plt.legend()
plt.show()

test.info()

X_kaggle = test[["Pclass","Sex", "Fare", "Embarked"]]

X_train_kaggle = X_kaggle.iloc[:, 0:5].values
X_train_kaggle

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, y)
y_pred_kaggle = knn.predict(X_train_kaggle)

submission = pd.DataFrame({
    "PassengerId": test["PassengerId"],
    "Survived": y_pred_kaggle
})

submission
submission.to_csv('submissions_kaggle.csv', index=False)
#files.download('submissions_kaggle.csv')

pickle.dump(knn, open('model.pkl', 'wb'))
model = pickle.load(open('model.pkl', 'rb'))
